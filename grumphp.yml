# grumphp.yml
# https://github.com/phpro/grumphp
grumphp:
    hooks_dir: ~
    hooks_preset: local
    git_hook_variables:
        EXEC_GRUMPHP_COMMAND: exec
        ENV: {}
    stop_on_failure: true
    ignore_unstaged_changes: false
    hide_circumvention_tip: false
    process_timeout: 60
    ascii:
        failed: grumphp-grumpy.txt
        succeeded: grumphp-happy.txt
    parallel:
        enabled: true
        max_workers: 32
    # FIXER (false: don't ask)
    fixer:
        enabled: true
        fix_by_default: false
    environment:
        files: []
        variables: {}
        paths: []

    # bin/grumphp run --testsuite=TESTSUITE
    testsuites: 
      # Specify the test-suite for the git:commit-msg command:
      # git_commit_msg:
      #     tasks: []

      # Specify the test-suite for the git:pre-commit command:
      git_pre_commit:
          tasks: 
            - phpparser
            - phpcsfixer

      lint:
          tasks:
            # first...
            - phpparser
            - phpcsfixer
            # ...then
            # phan (need 'php-ast' extension)
            - phpcpd
            - phpcs
            - phplint
            - phpmd
            - phpstan

      tests:
          tasks:
            - paratest
            - pest
            - phpunit

    extensions: []

    # https://github.com/phpro/grumphp/blob/master/doc/tasks.md
    tasks: 

      ### SAMPLE metadata
      # mytask:
      #   metadata:
      #     blocking: true # non blocking
      #     label: null
      #     priority: 0
      #     task: null

      ##############
      # GIT CONFIG #
      ##############

      # git_branch_name:
      #       whitelist:
      #           - "/JIRA-\d+/"
      #       blacklist:
      #           - "develop"
      #           - "master"
      #       additional_modifiers: ''
      #       allow_detached_head: true

      git_commit_message:
        allow_empty_message: false
        enforce_capitalized_subject: true
        enforce_no_subject_trailing_period: true
        enforce_single_lined_subject: true
        max_subject_width: 120
        max_body_width: 500
        matchers:
            Must contain a short description: '/.+/'
        case_insensitive: false
        multiline: false
        metadata:
            priority: 1000

      # only with git add and git commit
      git_blacklist:
          keywords:
              - "var_dump"
          whitelist_patterns: 
            - /^src\/(.*)/
          triggered_by: ['php']
          regexp_type: G
          match_word: false

      # max git filesize
      # file_size:
      #       max_size: 100M
      #       ignore_patterns: []

      ############
      # COMPOSER #
      ############

      # execute "composer validate" like
      composer:
            file: ./composer.json
            no_check_all: true
            no_check_lock: true
            no_check_publish: true
            no_local_repository: true
            with_dependencies: false
            strict: false
      
      # github: ergebnis/composer-normalize
      # 
      # composer update --lock
      # composer 'normalize' '--no-update-lock'
    #   composer_normalize:
    #         indent_size: ~
    #         indent_style: ~
    #         no_update_lock: true
    #         # Composer-normalize command
    #         use_standalone: true
    #         verbose: false

      # github: maglnet/composer-require-checker
    #   composer_require_checker:
    #         composer_file: 'composer.json'
    #         config_file: ~
    #         ignore_parse_errors: false
    #         triggered_by: ['composer.json', 'composer.lock', '*.php']



      #######################################################################################

      ##########
      # LINTER #
      ##########

      ### Codestyle checks 
      # github: friendsofphp/php-cs-fixer
      # NB: (no auto-fix) https://github.com/wearejust/grumphp-extra-tasks
      phpcsfixer:
            # allow_risky: true
            config: lint/.php_cs
            # cache_file: ~
            # rules:
            #   '@PSR2': true
            #   line_ending: false
            #   array_syntax:
            #     syntax: short
            # using_cache: ~
            # config_contains_finder: true
            # verbose: true
            # diff: false
            # triggered_by: ['php']
            metadata:
              priority: 1

      ### Analyse black-listed functions
      # github: nikic/PHP-Parser
      phpparser:
        visitors:
          no_exit_statements: ~
          forbidden_function_calls:
              blacklist:
              - 'var_dump'
              - 'dump'
        triggered_by: [php]
        metadata:
            priority: 2

      ### Static analyzer 
      # github: phan/phan
      # Err: Need php-ast extension, have to run from cli
      # phan:
      #       config_file: lint/phan.config.php
      #       output_mode: text
      #       output: null
      #       triggered_by: [php]

      ### Copy detector duplicated lines
      # github: sebastian/phpcpd
      phpcpd:
            directory: ['./src']
            exclude: ['vendor']
            fuzzy: false
            min_lines: 5
            min_tokens: 70
            triggered_by: ['php']

      ### Bad coding standards
      # github: squizlabs/PHP_CodeSniffer
      phpcs:
            standard: lint/phpcs.xml # []
            # severity: ~
            # error_severity: ~
            # warning_severity: ~
            # tab_width: ~
            # report: full
            # report_width: ~
            # whitelist_patterns: [ - /^src\/(.*)/ ]
            # encoding: ~
            # ignore_patterns: []
            # sniffs: []
            # triggered_by: [php]
            # exclude: []

      ### Syntax errors
      # github: php-parallel-lint/php-parallel-lint
      # - No config file needed -
      phplint:
            exclude: []
            jobs: ~
            short_open_tag: false
            ignore_patterns: []
            triggered_by: ['php', 'phtml']

      ### Bad coding standards
      # github: phpmd/phpmd
      phpmd:
          whitelist_patterns: []
          exclude: []
          report_format: text
          ruleset: ['lint/phpmd.xml', 'unusedcode']
          triggered_by: ['php']

      ### Finding php errors
      # github: phpstan/phpstan
      phpstan:
            configuration: lint/phpstan.neon
            # autoload_file: ~
            # level: null
            # force_patterns: []
            # ignore_patterns: []
            # triggered_by: ['php']
            # memory_limit: "-1"
            # use_grumphp_paths: true

      #######################################################################################

      ###########
      # TESTING #
      ###########

      ### Full-stack tests
      # github: codeception/codeception
      # codeception:
      #       config_file: ~
      #       fail_fast: false
      #       suite: ~
      #       test: ~

      ### Php paralleles tests
      # github: brianium/paratest
      # BUG, cannot open file:
      # phpunit.xml need to be on the root folder
      paratest:
          # configuration: ~
          # processes: auto
          # functional: true
          # group: []
          # always_execute: false
          # phpunit: null
          # runner: null
          # coverage-clover: null
          # coverage-html: null
          # coverage-php: null
          # coverage-xml: null
          # log-junit: null
          # testsuite: null
          # verbose: false

      ### Beautify PhpUnit report
      # github: pestphp/pest
      pest:
          config_file: phpunit.xml
          # testsuite: ~
          # group: []
          # always_execute: true

      ### PhpUnit
      # github: phpunit/phpunit
      phpunit:
        config_file: phpunit.xml
          # testsuite: ~
          # group: []
          # always_execute: true

      ### PhpSpec
      # github: phpspec/phpspec
      # phpspec:
      #       config_file: ~
      #       format: ~
      #       stop_on_failure: false
      #       verbose: false

      #######################################################################################

      ##############
      # AUTOMATION #
      ##############

      # ant:
      #       build_file: ~
      #       task: ~
      #       triggered_by: [php]
     
      # automated php tasks
      # phing:
      #       build_file: ~
      #       task: ~
      #       triggered_by: [php]

      # Automated PHP tasks
      # github: consolidation/robo
      # robo:
      #       load_from: ~
      #       task: ~
      #       triggered_by: [php]
      
      #############
      # SCRIPTING #
      #############

      # make tasks
      # make:
      #       make_file: ~
      #       task: ~
      #       triggered_by: [php]

      # shell:
          # scripts: []
          # triggered_by: [php]

      ##############
      # OTHER LINT #
      ##############

      # xmllint:
      #       ignore_patterns: []
      #       load_from_net: false
      #       x_include: false
      #       dtd_validation: false
      #       scheme_validation: false
      #       triggered_by: ['xml']

      # yamllint:
      #       whitelist_patterns: []
      #       ignore_patterns: []
      #       object_support: false
      #       exception_on_invalid_type: false
      #       parse_constant: false
      #       parse_custom_tags: false
      